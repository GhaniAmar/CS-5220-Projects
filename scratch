/* We generate the graph on the first thread and then send the pieces out */
/* Could refine even more to interleave generating and sending! */
int* mpi_gen_graph(const int n, const double p, const int n_columns) {
    int i, j, id, rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int* l = calloc(n * n_columns, sizeof(int));

    if (rank == 0) {
        struct mt19937p state;
        sgenrand(10302011UL, &state);
        int graph[n * n];

        /* Generate random graph */
        for (j = 0; j < n; ++j) {
            for (i = 0; i < n; ++i)
                graph[j*n + i] = (genrand(&state) < p);
            graph[j*n + j] = 0;
        }

        /* Copy my columns into local buffer */
        for (j = 0; j < n_columns; ++j)
            for (i = 0; i < n; ++i)
                l[j*n + i] = graph[j*n + i];

        /* Send other columns out to minions */
        for (id = 1; id < rank; ++id) {
            const int id_column_start = (id * n) / size;
            const int id_column_end   = ((id + 1) * n) / size;
            const int id_n_columns    = id_column_end - id_column_start;

            MPI_Send(graph + n * id_column_start, id_n_columns * n,
                     MPI_INT, id, 0, MPI_COMM_WORLD);
        }
    }
    else
        /* Receive columns from head thread */
        MPI_Recv(l, n_columns * n, MPI_INT, 0, 0,
                 MPI_COMM_WORLD, MPI_STATUS_IGNORE);

    return l;
}


/* CAVEAT: The return value is only the correct checksum at processor 0 */
int fletcher16p(int* data, int count, int rank, int nproc) {
    int sum[2] = {0, 0};
    int i;

    if (rank != 0)
        MPI_Recv(sum, 2, MPI_INT, rank - 1, 0,
                 MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    for (i = 0; i < count; ++i) {
        sum[0] = (sum[0] + data[i]) % 255;
        sum[1] = (sum[1] + sum[0]) % 255;
    }

    if (nproc != 1) {
        MPI_Send(sum, 2, MPI_INT, (rank + 1) % nproc,
                 0, MPI_COMM_WORLD);

        if (rank == 0)
            MPI_Recv(sum, 2, MPI_INT, nproc - 1, 0,
                     MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    }

    return (sum [1] << 8) | sum[0];
}

        printf("Thread %d gives column chunk %d to the left and "
               "receives %d to the right.\n", rank, prev_column, column);

    printf("Thread %d has columns %d to %d (%d columns).\n", rank, column_start, column_end, local_columns);